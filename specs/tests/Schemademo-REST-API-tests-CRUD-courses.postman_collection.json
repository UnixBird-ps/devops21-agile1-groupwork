{
	"info": {
		"_postman_id": "532d83d3-0061-4a27-bcaf-bf3ebd754729",
		"name": "Schemademo-REST-API-tests-CRUD-courses",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Fail register new course unauthed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of POST method to fail reg' );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockCourse = pm.variables.get( \"mockCourse\" );\r",
							"\r",
							"// Set the request body programmatically instead of a JSON construct in the body tab\r",
							"pm.request.body = JSON.stringify( mockCourse );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of POST method to fail reg' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 403.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 403 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response has expected error message.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( 'error' );\r",
							"\t\tpm.expect( responseJSON.error ).to.equal( 'no access' );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate as admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of POST method to auth' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the login status is confirmed in the JSON of the response\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"loggedIn\" );\r",
							"\t\tpm.expect( responseJSON.loggedIn ).to.be.true;\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of POST method to auth' );\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"email\": \"{{userName}}\",\r\n\t\"password\": \"{{userPw}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restAuthPath}}",
					"host": [
						"{{restHost}}{{restAuthPath}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(C in CRUD) Register new course",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of POST method' );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockCourse = pm.variables.get( \"mockCourse\" );\r",
							"\r",
							"// Set a variable to be used in the request body to hold whole object instead of a JSON construct\r",
							"pm.variables.set( 'reqBody', JSON.stringify( mockCourse ) );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of POST method' );\r",
							"\r",
							"// Grab the object in the response, JSON -> Object\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockCourse = pm.variables.get( \"mockCourse\" );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\r",
							"    // Get new row id\r",
							"    mockCourse.id = responseJSON.lastInsertRowid;\r",
							"\r",
							"    // Update var for use in later requests\r",
							"    pm.variables.set( \"mockCourse\", mockCourse, Object );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{reqBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(R in CRUD) Get new course",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of GET method (single)' );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockCourse = pm.variables.get( 'mockCourse' );\r",
							"\r",
							"// Set the var to be used in the URL\r",
							"pm.variables.set( 'mockCourseId', mockCourse.id );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of GET method' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockCourse = pm.variables.get( 'mockCourse' );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t'Check that the response code is 200',\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t'Check that the received object has expected keys',\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.all.keys( 'id', 'name', 'shortName', 'class', 'points', 'startDate', 'endDate', 'plan', 'invoiceItem', 'hoursPerDay', 'hide' );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t'Check that the received object\\'s props have expected values',\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON.id          ).to.be.equal( mockCourse.id );\r",
							"\t\tpm.expect( responseJSON.name        ).to.be.equal( mockCourse.name );\r",
							"\t\tpm.expect( responseJSON.shortName   ).to.be.equal( mockCourse.shortName );\r",
							"\t\tpm.expect( responseJSON.class       ).to.be.equal( mockCourse.class );\r",
							"\t\tpm.expect( responseJSON.points      ).to.be.equal( mockCourse.points );\r",
							"\t\tpm.expect( responseJSON.startDate   ).to.be.equal( mockCourse.startDate );\r",
							"\t\tpm.expect( responseJSON.endDate     ).to.be.equal( mockCourse.endDate );\r",
							"\t\tpm.expect( responseJSON.plan        ).to.be.equal( mockCourse.plan );\r",
							"\t\tpm.expect( responseJSON.invoiceItem ).to.be.equal( mockCourse.invoiceItem );\r",
							"\t\tpm.expect( responseJSON.hoursPerDay ).to.be.equal( mockCourse.hoursPerDay );\r",
							"\t\tpm.expect( responseJSON.hide        ).to.be.equal( mockCourse.hide );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}/{{mockCourseId}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}",
						"{{mockCourseId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(U in CRUD) Modify new course",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of PUT method' );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockCourse = pm.variables.get( \"mockCourse\" );\r",
							"\r",
							"let moddedCourse =\r",
							"{\r",
							"  id :          mockCourse.id,\r",
							"  name :        mockCourse.name + \".test_modded\",\r",
							"  shortName :   mockCourse.shortName + \".test_modded\",\r",
							"  class :       mockCourse.class,\r",
							"  points :      mockCourse.points+5,\r",
							"  startDate :   '2022-08-12',\r",
							"  endDate :     '2022-09-23',\r",
							"  plan :        null,\r",
							"  invoiceItem : +Date.now().toString().slice( -1 )+1,\r",
							"  hoursPerDay : +Date.now().toString().slice( -1 )+1,\r",
							"  hide :        Date.now() % 2 == 0\r",
							"}\r",
							"\r",
							"pm.variables.set( \"moddedCourse\", moddedCourse, Object );\r",
							"// Set the var to be used in the URL\r",
							"pm.variables.set( \"moddedCourseId\", moddedCourse.id );\r",
							"\r",
							"// Set the var to be used in the request body to hold whole object instead of a JSON construct\r",
							"pm.variables.set( 'reqBody', JSON.stringify( moddedCourse ) );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of PUT method' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockCourse = pm.variables.get( 'mockCourse' );\r",
							"let moddedCourse = pm.variables.get( 'moddedCourse' );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{reqBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}/{{moddedCourseId}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}",
						"{{moddedCourseId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(R in CRUD) Get all courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of GET method (all)' );\r",
							"// Define local vars to be used in tests\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"// Get the var that was set in the previous step\r",
							"let moddedSchool = pm.variables.get( \"moddedSchool\" );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we received an array\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.be.an( \"array\" );\r",
							"\r",
							"    // Create an array to hold all mock schools to be used in later steps\r",
							"    let allMockSchoolsInDB = [];\r",
							"    for ( let i = 0; i < responseJSON.length; i++ )\r",
							"    {\r",
							"      let s = responseJSON[ i ];\r",
							"      if ( s.name.toLowerCase().startsWith( \"mock.\" ) ) allMockSchoolsInDB.push( s );\r",
							"    }\r",
							"    pm.variables.set( \"allMockSchoolsInDB\", allMockSchoolsInDB, Array )\r",
							"    if ( allMockSchoolsInDB.length <= 0 ) postman.setNextRequest( \"Unauthenticate\" );\r",
							"\t}\r",
							");\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the change of name is present\",\r",
							"\tfunction()\r",
							"\t{\r",
							"    // Get the last added\r",
							"    let lastSchool = responseJSON.slice( -1 )[ 0 ];\r",
							"\t\tpm.expect( moddedSchool ).to.have.all.keys( \"id\", \"name\", \"shortName\" );\r",
							"\t\tpm.expect( lastSchool.name ).to.be.equal( moddedSchool.name );\r",
							"\t\tpm.expect( lastSchool.shortName ).to.be.equal( moddedSchool.shortName );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of GET (all) method' );\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(D in CRUD) Delete mock courses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of DEL method' );\r",
							"\r",
							"// Get all mock schools from previous request\r",
							"let allMockSchoolsInDB = pm.variables.get( \"allMockSchoolsInDB\" );\r",
							"// Set the var to be used in URL of this request\r",
							"pm.variables.set( \"mockSchoolId\", allMockSchoolsInDB[ 0 ].id );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of DEL method' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"  \"Check that the response code was 200.\",\r",
							"  function()\r",
							"  {\r",
							"    pm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"  }\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\r",
							"    let allMockSchoolsInDB = pm.variables.get( \"allMockSchoolsInDB\" );\r",
							"    allMockSchoolsInDB.shift();\r",
							"\r",
							"    if ( Array.isArray( allMockSchoolsInDB ) && allMockSchoolsInDB.length > 0 )\r",
							"    {\r",
							"        pm.variables.set( \"allMockSchoolsInDB\", allMockSchoolsInDB, Object )\r",
							"\r",
							"        postman.setNextRequest( pm.info.requestName );\r",
							"    }\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}/{{mockSchoolId}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}",
						"{{mockSchoolId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(D in CRUD) Fail delete nonexistant course",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of DEL method (to fail)' );\r",
							"\r",
							"// Set the var to be used in URL of this request\r",
							"pm.variables.set( \"mockSchoolId\", -1 );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of DEL method (to fail)' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"  \"Check that the response code was 200.\",\r",
							"  function()\r",
							"  {\r",
							"    pm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"  }\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 0 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 0 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}/{{mockSchoolId}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}",
						"{{mockSchoolId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauthenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of DEL method to unauth' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the login status is confirmed in the JSON of the response\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"loggedIn\" );\r",
							"\t\tpm.expect( responseJSON.loggedIn ).to.be.false;\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'In Pre-req of DELETE method to unauth' );\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restAuthPath}}",
					"host": [
						"{{restHost}}{{restAuthPath}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"// Create mock data",
					"if ( !pm.variables.has( \"mockCourse\" ) )",
					"{",
					"  console.log( 'Generating mock data:' );",
					"",
					"  let timeUnixEPOCms = Date.now().toString();",
					"",
					"  let mockCourse =",
					"  {",
					"    name :       `mock.Course${timeUnixEPOCms}`,",
					"    shortName :  `mock.${timeUnixEPOCms}`,",
					"    class:       null,",
					"    points:      5,",
					"    startDate:   '2022-09-12',",
					"    endDate:     '2022-09-16',",
					"    plan:        null,",
					"    invoiceItem: +Date.now().toString().slice( -1 )+1,",
					"    hoursPerDay: +Date.now().toString().slice( -1 )+1,",
					"    hide:        Date.now() % 2 == 0",
					"  };",
					"",
					"  console.log( 'mockCourse:', mockCourse );",
					"",
					"  // Create a var to be used in later methods",
					"  pm.variables.set( \"mockCourse\", mockCourse, Object );",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "restHost",
			"value": "http://localhost:7666",
			"type": "default"
		},
		{
			"key": "userName",
			"value": "exempel@nodehill.com",
			"type": "default"
		},
		{
			"key": "userPw",
			"value": "abc123",
			"type": "default"
		},
		{
			"key": "restAuthPath",
			"value": "/data/login",
			"type": "default"
		},
		{
			"key": "restApiPath",
			"value": "/data",
			"type": "default"
		},
		{
			"key": "tableName",
			"value": "courses",
			"type": "default"
		}
	]
}