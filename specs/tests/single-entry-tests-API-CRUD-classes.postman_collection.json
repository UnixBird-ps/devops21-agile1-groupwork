{
	"info": {
		"_postman_id": "8dc2bece-4891-4407-b117-3185b6b52f7c",
		"name": "Redoing Laddad ner 12sep Schemademo-REST-API-tests-CRUD-school",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authenticate as admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests scripts for POST method to auth starts below' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the login status is confirmed in the JSON of the response\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"loggedIn\" );\r",
							"\t\tpm.expect( responseJSON.loggedIn ).to.be.true;\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"email\": \"{{userName}}\",\r\n\t\"password\": \"{{userPw}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restAuthPath}}",
					"host": [
						"{{restHost}}{{restAuthPath}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(C in CRUD) Register new class",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'Pre-req scripts of C Crud create new class starts below' );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockClass = pm.variables.get( \"mockClass\" );\r",
							"pm.variables.set( \"mockClassName\", mockClass.name );\r",
							"pm.variables.set( \"mockClassShortName\", mockClass.shortName );\r",
							"parseInt(pm.variables.set( \"mockClassSchool\", mockClass.school ));\r",
							"pm.variables.set( \"mockClassBlog\", mockClass.blog );\r",
							"\r",
							"//pm.variables.set( \"mockClassHide\", mockClass.hide );\r",
							"//pm.variables.set( \"mockClassDefaultStartTime\", mockClass.defaultStartTime );\r",
							"//pm.variables.set( \"mockClassDefaultEndTime\", mockClass.defaultEndTime );\r",
							"//pm.variables.set( \"mockClassDefaultInvoiceItem\", mockClass.defaultInvoiceItem );\r",
							"//pm.variables.set( \"mockClassDefaultHoursPerDay\", mockClass.defaultHoursPerDay );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests scripts for Register new class start below' );\r",
							"\r",
							"// Grab the object in the response, JSON -> Object\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockClass = pm.variables.get( \"mockClass\" );\r",
							"//I have to set the variables below here as well (from pre-request sript) or it will take\r",
							"//the variable format in the body as a string and send it in as such.\r",
							"//But now I am getting the same variables sent so getting not unique shortname error in db. Will try\r",
							"//without setting these variables to see if that works. It did the first time, but not a second\r",
							"//time. It is a hit and miss with the variables being the same, so now I will try again with\r",
							"//putting these back in. But I suspect it has to do with the randomization that just happens to be\r",
							"//the same(maybe not random enough?)\r",
							"//I have now run it 6 times & it loops through the previous ones. I will run again.\r",
							"//I did run it again & it finally gave a different one & then it went through with register\r",
							"pm.variables.set( \"mockClassName\", mockClass.name );\r",
							"pm.variables.set( \"mockClassShortName\", mockClass.shortName );\r",
							"parseInt(pm.variables.set( \"mockClassSchool\", mockClass.school ));\r",
							"pm.variables.set( \"mockClassBlog\", mockClass.blog );\r",
							"//pm.variables.set( \"mockClassHide\", mockClass.hide );\r",
							"//pm.variables.set( \"mockClassDefaultStartTime\", mockClass.defaultStartTime );\r",
							"//pm.variables.set( \"mockClassDefaultEndTime\", mockClass.defaultEndTime );\r",
							"//pm.variables.set( \"mockClassDefaultInvoiceItem\", mockClass.defaultInvoiceItem );\r",
							"//pm.variables.set( \"mockClassDefaultHoursPerDay\", mockClass.defaultHoursPerDay );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\r",
							"    // console.log( 'mockSchool:', mockSchool );\r",
							"\r",
							"    // // Get new row id\r",
							"    mockClass.id = responseJSON.lastInsertRowid;\r",
							"\r",
							"    // // Update var for use in later steps \r",
							"    pm.variables.set( \"mockClass\", mockClass, Object );\r",
							"    // console.log( 'mockSchool:', mockSchool );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{mockClassName}}\",\r\n    \"shortName\": \"{{mockClassShortName}}\",\r\n    \"school\": \"{{mockClassSchool}}\",\r\n    \"blog\": \"{{mockClassBlog}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(R in CRUD) Get new class id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'Pre-req script of GET (single) new class id starts below' );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockClass = pm.variables.get( 'mockClass' );\r",
							"\r",
							"// Set the var to be used in the URL\r",
							"pm.variables.set( 'mockClassId', mockClass.id );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests script of GET new class id starts below' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockClass = pm.variables.get( \"mockClass\" );\r",
							"pm.variables.set( 'mockClassId', mockClass.id );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code is 200\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"//testing if I need to add all columns instead of just three for this below test to work.\r",
							"//confirmed that test will work if it has all of the columns existing in db. Wondering if it needs\r",
							"//to be ALL or just all KEYS that have some type of constraint in db.\r",
							"pm.test(\r",
							"\t\"Check that the received object has expected keys\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.all.keys( \"id\",\"name\",\"shortName\",\"school\",\"blog\",\"hide\",\"defaultStartTime\",\"defaultEndTime\",\"defaultInvoiceItem\",\"defaultHoursPerDay\");\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the received object's props have expected values\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON.id ).to.be.equal( mockClass.id );\r",
							"\t\tpm.expect( responseJSON.name ).to.be.equal( mockClass.name );\r",
							"\t\tpm.expect( responseJSON.shortName ).to.be.equal( mockClass.shortName );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}{{tableName}}/{{mockClassId}}",
					"host": [
						"{{restHost}}{{restApiPath}}{{tableName}}"
					],
					"path": [
						"{{mockClassId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(U in CRUD) Modify new class",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'Pre-req scripts for PUT method starts below' );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockClass = pm.variables.get( \"mockClass\" );\r",
							"\r",
							"// Set the var to be used in the URL\r",
							"pm.variables.set( 'mockClassId', mockClass.id );\r",
							"\r",
							"let moddedClass =\r",
							"{\r",
							"  id: mockClass.id,\r",
							"  name : mockClass.name + \".test_modded\",\r",
							"  shortName : mockClass.shortName + \".test_modded\"\r",
							"}\r",
							"\r",
							"pm.variables.set( \"moddedClass\", moddedClass, Object );\r",
							"// Set the var to be used in the URL and the request body\r",
							"pm.variables.set( \"moddedClassId\", moddedClass.id );\r",
							"// Set the var to be used in the request body\r",
							"pm.variables.set( \"moddedClassName\", moddedClass.name );\r",
							"pm.variables.set( \"moddedClassShortName\", moddedClass.shortName );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests scripts of PUT method starts below' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// Get the var that was set in the previous step\r",
							"let mockClass = pm.variables.get( 'mockClass' );\r",
							"let moddedClass = pm.variables.get( 'moddedClass' );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{moddedClassId}}\",\r\n    \"name\": \"{{moddedClassName}}\",\r\n    \"shortName\": \"{{moddedClassShortName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}{{tableName}}/{{mockClassId}}",
					"host": [
						"{{restHost}}{{restApiPath}}{{tableName}}"
					],
					"path": [
						"{{mockClassId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(R in CRUD) Get all classes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests scripts of GET all classes start below' );\r",
							"// Define local vars to be used in tests\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"// Get the var that was set in the previous step\r",
							"let moddedClass = pm.variables.get( \"moddedClass\" );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we received an array\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.be.an( \"array\" );\r",
							"\r",
							"    // Create an array to hold all mock schools to be used in later steps\r",
							"    let allMockClassesInDB = [];\r",
							"    for ( let i = 0; i < responseJSON.length; i++ )\r",
							"    {\r",
							"      let s = responseJSON[ i ];\r",
							"      if ( s.name.toLowerCase().startsWith( \"mock.\" ) ) allMockClassesInDB.push( s );\r",
							"    }\r",
							"    pm.variables.set( \"allMockClassesInDB\", allMockClassesInDB, Array )\r",
							"    if ( allMockClassesInDB.length <= 0 ) postman.setNextRequest( \"Unauthenticate\" );\r",
							"\t}\r",
							");\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the change of name is present\",\r",
							"\tfunction()\r",
							"\t{\r",
							"    // Get the last added\r",
							"    let lastClass = responseJSON.slice( -1 )[ 0 ];\r",
							"\t\tpm.expect( moddedClass ).to.have.all.keys( \"id\", \"name\", \"shortName\" );\r",
							"\t\tpm.expect( lastClass.name ).to.be.equal( moddedClass.name );\r",
							"\t\tpm.expect( lastClass.shortName ).to.be.equal( moddedClass.shortName );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(D in CRUD) Delete mock classes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'Pre-request scripts of DEL mock class starts below' );\r",
							"\r",
							"// Get all mock schools from previous request\r",
							"let allMockClassesInDB = pm.variables.get( \"allMockClassesInDB\" );\r",
							"// Set the var to be used in URL of this request\r",
							"pm.variables.set( \"mockClassId\", allMockClassesInDB[ 0 ].id );"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests scripts of DEL mock class starts below' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"  \"Check that the response code was 200.\",\r",
							"  function()\r",
							"  {\r",
							"    pm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"  }\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\r",
							"    let allMockClassesInDB = pm.variables.get( \"allMockClassesInDB\" );\r",
							"    allMockClassesInDB.shift();\r",
							"\r",
							"    if ( Array.isArray( allMockClassesInDB ) && allMockClassesInDB.length > 0 )\r",
							"    {\r",
							"        pm.variables.set( \"allMockClassesInDB\", allMockClassesInDB, Object )\r",
							"\r",
							"        postman.setNextRequest( pm.info.requestName );\r",
							"    }\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}{{tableName}}/{{mockClassId}}",
					"host": [
						"{{restHost}}{{restApiPath}}{{tableName}}"
					],
					"path": [
						"{{mockClassId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(D in CRUD) Fail delete nonexistant school",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info( 'Pre-req scripts of DEL method (to fail) start below' );\r",
							"\r",
							"// Set the var to be used in URL of this request\r",
							"pm.variables.set( \"mockClassId\", -1 );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests scripts of DEL method (to fail) start below' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"  \"Check that the response code was 200.\",\r",
							"  function()\r",
							"  {\r",
							"    pm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"  }\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 0 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 0 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}{{tableName}}/{{mockClassId}}",
					"host": [
						"{{restHost}}{{restApiPath}}{{tableName}}"
					],
					"path": [
						"{{mockClassId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauthenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'Tests script of DEL method to log out starts below' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the login status is confirmed in the JSON of the response\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"loggedIn\" );\r",
							"\t\tpm.expect( responseJSON.loggedIn ).to.be.false;\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restAuthPath}}",
					"host": [
						"{{restHost}}{{restAuthPath}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.info( 'Pre-request script of entire collection starts below' );",
					"// Create mock data",
					"if ( !pm.variables.has( \"mockClass\" ) )",
					"{",
					"  // console.log( 'Generating mock data:' );",
					"",
					"  // Get a 6 digits random number",
					"  // Math.random is a predetermined sequence so, use a custom",
					"  let randomSix = '';",
					"  // Take last digit from EPOC miliseconds",
					"  let lastDigit = +Date.now().toString().slice( -1 );",
					"  while ( randomSix.length < 6 )",
					"  {",
					"    lastDigit += +Date.now().toString().slice( -1 );",
					"    randomSix += lastDigit.toString().slice( -1 );",
					"  }",
					"  //let randomSixInt = parseInt(randomSix.slice(-5))",
					"//couldn't convert or cast the number string to int, need to look further, because it will fail otherwise.",
					"  let mockClass =",
					"  {",
					"    name : `mock.TestClass${randomSix}`,",
					"    shortName : `mock.Test${randomSix}`,",
					"    school : 10,",
					"    blog : `mock.Blog${randomSix}Test.se`,",
					"  };",
					"  // Create a var to be used in later methods",
					"  pm.variables.set( \"mockClass\", mockClass, Object );",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "restHost",
			"value": "http://localhost:7666",
			"type": "default"
		},
		{
			"key": "userName",
			"value": "exempel@nodehill.com",
			"type": "default"
		},
		{
			"key": "userPw",
			"value": "abc123",
			"type": "default"
		},
		{
			"key": "restAuthPath",
			"value": "/data/login",
			"type": "default"
		},
		{
			"key": "restApiPath",
			"value": "/data/",
			"type": "default"
		},
		{
			"key": "tableName",
			"value": "classes",
			"type": "default"
		}
	]
}