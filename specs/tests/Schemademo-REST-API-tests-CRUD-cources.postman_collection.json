{
	"info": {
		"_postman_id": "de36f76c-0a23-4222-ba87-a1f9ca0b69c7",
		"name": "Schemademo-REST-API-tests-CRUD-cources",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19660886"
	},
	"item": [
		{
			"name": "Fail register new cources when unauthed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let mockCources = pm.variables.get( \"mockCources\" );\r",
							"pm.variables.set( \"mockCourcesName\", mockCources.name );\r",
							"pm.variables.set( \"mockCourcesShortName\", mockCources.shortName );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let responseJSON = pm.response.json();\r",
							"\r",
							"let mockCources = pm.variables.get( \"mockCources\" );\r",
							"// // Get new row id\r",
							"mockCources.id = responseJSON.lastInsertRowid;\r",
							"pm.variables.set( \"mockCourcesId\", mockCources.id );\r",
							"// // Update var for use in later steps \r",
							"pm.variables.set( \"mockCources\", mockCources, Object );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 403.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 403 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response has an error message.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( 'error' );\r",
							"\t\tpm.expect( responseJSON.error ).to.equal( 'no access' );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\": \"{{mockCourcesName}}\",\r\n\t\"shortName\": \"{{mockCourcesShortName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate as admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let responseJSON = pm.response.json();\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the login status is confirmed in the JSON of the response\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"loggedIn\" );\r",
							"\t\tpm.expect( responseJSON.loggedIn ).to.be.true;\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"email\": \"{{userName}}\",\r\n\t\"password\": \"{{userPw}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restAuthPath}}",
					"host": [
						"{{restHost}}{{restAuthPath}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(C in CRUD) Register new  cources Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let mockCources = pm.variables.get( \"mockCources\" );\r",
							"pm.variables.set( \"mockCourcesName\", mockCources.name );\r",
							"pm.variables.set( \"mockCourcesShortName\", mockCources.shortName );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"let mockCources = pm.variables.get( \"mockCources\" );\r",
							"console.log( mockCources );\r",
							"\r",
							"// // Get new row id\r",
							"mockCources.id = responseJSON.lastInsertRowid;\r",
							"//pm.collectionVariables.set( \"mockCourcesId\", mockCources.id );\r",
							"pm.variables.set( \"mockCourcesId\", mockCources.id );\r",
							"// // Update var for use in later steps \r",
							"pm.variables.set( \"mockCources\", mockCources, Object );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\": \"{{mockCourcesName}}\",\r\n\t\"shortName\": \"{{mockCourcesShortName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(R in CRUD) Get freshly created cources",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let responseJSON = pm.response.json();\r",
							"let mockCources = pm.variables.get( \"mockCources\" );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code is 200\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the received object has expected keys\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.all.keys( \"id\", \"name\", \"shortName\", \"class\", \"points\", \"startDate\", \"endDate\", \"plan\", \"invoiceItem\", \"hoursPerDay\", \"hide\" );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the received object's props have expected values\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON.id ).to.be.equal( mockCources.id );\r",
							"\t\tpm.expect( responseJSON.name ).to.be.equal( mockCources.name );\r",
							"\t\tpm.expect( responseJSON.shortName ).to.be.equal( mockCources.shortName );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}/{{mockCourcesId}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}",
						"{{mockCourcesId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(U in CRUD) Change info of existing cources",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let mockCources = pm.variables.get( \"mockCources\" );\r",
							"console.log( mockCources );\r",
							"\r",
							"//pm.variables.set( \"mockCourcesId\", mockCources.id );\r",
							"//pm.variables.set( \"moddedCourcesId\", mockCources.id );\r",
							"\r",
							"\r",
							"let moddedCources =\r",
							"{\r",
							"   name : mockCources.name + \".test_modded\",\r",
							"   shortName : mockCources.shortName + \".test_modded\"\r",
							"}\r",
							"\r",
							"pm.variables.set( \"moddedCources\", moddedCources, Object );\r",
							"pm.variables.set( \"moddedCourcesName\", moddedCources.name );\r",
							"pm.variables.set( \"moddedCourcesShortName\", moddedCources.shortName );\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseJSON = pm.response.json();\r",
							"let mockCources = pm.variables.get( \"mockCources\" );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the database reports 1 change.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"id\": \"{{mockCourcesId}}\",\r\n   \"name\": \"{{moddedCourcesName}}\",\r\n   \"shortName\": \"{{moddedCourcesShortName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}/{{mockCourcesId}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}",
						"{{mockCourcesId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(R in CRUD) Get list of all cources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let moddedCources = pm.variables.get( \"moddedCources\" );\r",
							"\r",
							"let responseObject = pm.response.json();\r",
							"\r",
							"let allMockCources = [];\r",
							"\r",
							"for ( let i = 0; i < responseObject.length; i++ )\r",
							"{\r",
							"\tlet s = responseObject[ i ];\r",
							"\tif ( s.name.toLowerCase().startsWith( \"mock.\" ) ) allMockCources.push( s );\r",
							"}\r",
							"\r",
							"pm.variables.set( \"allMockCources\", allMockCources, Object )\r",
							"\r",
							"if ( allMockCources.length <= 0 ) postman.setNextRequest( \"Unauthenticate\" );\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we received an array\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseObject ).to.be.an( \"array\" );\r",
							"\t}\r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(D in CRUD) Delete",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let allMockCources = pm.variables.get( \"allMockCources\" );\r",
							"// Set the var to be used in URL of this request\r",
							"pm.variables.set( \"mockCourcesId\", allMockCources[ 0 ].id );\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.info( 'In Tests of DEL method' );\r",
							"\r",
							"let responseJSON = pm.response.json();\r",
							"console.log( responseJSON );\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"   \"Check that the response code was 200.\",\r",
							"   function()\r",
							"   {\r",
							"      pm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\r",
							"      let allMockCources = pm.variables.get( \"allMockCources\" );\r",
							"      allMockCources.shift();\r",
							"\r",
							"      if ( Array.isArray( allMockCources ) && allMockCources.length > 0 )\r",
							"      {\r",
							"         pm.variables.set( \"allMockCources\", allMockCources, Object )\r",
							"\r",
							"         postman.setNextRequest( pm.info.requestName );\r",
							"      }\r",
							"   }\r",
							");\r",
							"\r",
							"\r",
							"//pm.test(\r",
							"//\t\"Check that the database reports 1 change.\",\r",
							"//\tfunction()\r",
							"//\t{\r",
							"//\t\tpm.expect( responseJSON ).to.have.property( \"changes\" );\r",
							"//\t\tpm.expect( responseJSON.changes ).to.equal( 1 );\r",
							"\r",
							"//    let allMockCources = pm.variables.get( \"allMockCources\" );\r",
							"//    allMockCources.shift();\r",
							"\r",
							"//    if ( Array.isArray( allMockCources ) && allMockCources.length > 0 )\r",
							"//    {\r",
							"//        pm.variables.set( \"allMockCources\", allMockCources, Object )\r",
							"\r",
							"//        postman.setNextRequest( pm.info.requestName );\r",
							"//    }\r",
							"//\t}\r",
							"//);\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that we can grab the lastInsertRowid property of responseJSON.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"lastInsertRowid\" );\r",
							"\t\tpm.expect( responseJSON.lastInsertRowid ).to.be.a( \"number\" );\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restApiPath}}/{{tableName}}/{{{{mockCourcesId}}}}",
					"host": [
						"{{restHost}}{{restApiPath}}"
					],
					"path": [
						"{{tableName}}",
						"{{{{mockCourcesId}}}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauthenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let responseJSON = pm.response.json();\r",
							"\r",
							"\r",
							"// The tests\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the response code was 200.\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( pm.response.code ).to.be.equal( 200 );\r",
							"\t}\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\r",
							"\t\"Check that the login status is confirmed in the JSON of the response\",\r",
							"\tfunction()\r",
							"\t{\r",
							"\t\tpm.expect( responseJSON ).to.have.property( \"loggedIn\" );\r",
							"\t\tpm.expect( responseJSON.loggedIn ).to.be.false;\r",
							"\t}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{restHost}}{{restAuthPath}}",
					"host": [
						"{{restHost}}{{restAuthPath}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"// Create mock data",
					"if ( !pm.variables.has( \"mockCources\" ) )",
					"{",
					"   console.log( 'Generating mock data:' );",
					"",
					"    let timeUnixEPOCms = Date.now().toString();",
					"\tlet mockCources =",
					"  {",
					"    name :       `mock.Course${timeUnixEPOCms}`,",
					"    shortName :  `mock.${timeUnixEPOCms}`,",
					"    class:       null,",
					"    points:      5,",
					"    startDate:   '2022-09-12',",
					"    endDate:     '2022-09-16',",
					"    plan:        null,",
					"    invoiceItem: +Date.now().toString().slice( -1 )+1,",
					"    hoursPerDay: +Date.now().toString().slice( -1 )+1,",
					"    hide:        Date.now() % 2 == 0",
					"  };",
					"",
					"   console.log( mockCources );",
					"",
					"\tpm.variables.set( \"mockCources\", mockCources, Object );",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "restHost",
			"value": "http://localhost:7666",
			"type": "default"
		},
		{
			"key": "userName",
			"value": "exempel@nodehill.com",
			"type": "default"
		},
		{
			"key": "userPw",
			"value": "abc123",
			"type": "default"
		},
		{
			"key": "restAuthPath",
			"value": "/data/login",
			"type": "default"
		},
		{
			"key": "restApiPath",
			"value": "/data",
			"type": "default"
		},
		{
			"key": "tableName",
			"value": "courses",
			"type": "default"
		},
		{
			"key": "mockCourcesId",
			"value": "mockCourcesId",
			"disabled": true
		}
	]
}